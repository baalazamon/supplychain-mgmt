// SPDX-License-Identifier: MIT
pragma solidity >=0.4.21 <0.6.0;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

contract SupplyChain is FarmerRole, DistributorRole, RetailerRole, ConsumerRole {
  address payable owner;
  uint  upc;
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  function harvestItem(
      uint _upc,
      address _originFarmerID,
      string memory _originFarmName,
      string memory _originFarmInformation,
      string memory _originFarmLatitude,
      string memory _originFarmLongitude,
      string memory _productNotes) 
      public 
      onlyFarmer()
  {
    Item memory harvestedItem = Item({
      sku: sku,
      upc:_upc, 
      ownerID: msg.sender, 
      originFarmerID: _originFarmerID,
      originFarmName: _originFarmName,
      originFarmInformation: _originFarmInformation,
      originFarmLatitude: _originFarmLatitude,
      originFarmLongitude: _originFarmLongitude,
      productID: sku + _upc,
      productNotes: _productNotes,
      productPrice: 0,
      itemState: defaultState,
      distributorID: address(0),
      retailerID: address(0),
      consumerID: msg.sender
    });
    items[_upc] = harvestedItem;
    // Increment sku
    sku = sku + 1;
    emit Harvested(_upc);
  }

  function processItem(uint _upc) public 
    harvested(_upc)
    onlyFarmer()
  {
    items[_upc].itemState = State.Processed;
    emit Processed(_upc);
  }

  function packItem(uint _upc) public 
    processed(_upc)
    onlyFarmer()
  {
    items[_upc].itemState = State.Packed;
    emit Packed(_upc);
  }

  function sellItem(uint _upc, uint _price) public 
    packed(_upc)
    onlyFarmer()
  {
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    onlyDistributor() 
  {  
    items[_upc].itemState = State.Sold;
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    // Transfer money to farmer
    owner.transfer(items[_upc].productPrice);
    emit Sold(_upc);
  }

  function shipItem(uint _upc) public 
    sold(_upc)
    onlyDistributor()
  {
    items[_upc].itemState = State.Shipped;
    emit Shipped(_upc);
  }

  function receiveItem(uint _upc) public 
    shipped(_upc)
    onlyRetailer()
  {
    items[_upc].itemState = State.Received;
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    emit Received(_upc);
  }

  function purchaseItem(uint _upc) public 
    received(_upc)
    onlyConsumer()
  {
    items[_upc].itemState = State.Purchased;
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    emit Purchased(_upc);
  }

  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string memory originFarmName,
  string memory originFarmInformation,
  string memory originFarmLatitude,
  string memory originFarmLongitude
  ) 
  {
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    ownerID = item.ownerID;
    originFarmerID = item.originFarmerID;
    originFarmName = item.originFarmName;
    originFarmInformation = item.originFarmInformation;
    originFarmLatitude = item.originFarmLatitude;
    originFarmLongitude = item.originFarmLongitude;
  }

  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address payable consumerID
  ) 
  {
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    productID = item.productID;
    productNotes = item.productNotes;
    productPrice = item.productPrice;
    itemState = uint(item.itemState);
    distributorID = item.distributorID;
    retailerID = item.retailerID;
    consumerID = item.consumerID;
  }
}
